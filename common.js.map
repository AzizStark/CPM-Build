{"version":3,"sources":["./src/app/core/core-data/clients/clients.service.ts","./src/app/core/core-data/projects/projects.service.ts","./src/app/core/core-data/resources/resources.service.ts","./src/app/core/utils/validation.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Client } from './clients';\nimport { PaginatedResult } from './paginatedResult';\nimport { convertToSortQueryString, convertToActiveQueryString } from '../../utils/queryUtils';\nimport { ClientRequest } from './clientRequest';\nimport { ClientResponse } from './clientResponse';\nimport { environment } from '../../../../environments/environment.prod';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\n\nconst BASE_URL = environment.SPRINGBOOT_API_ENDPOINT;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClientsService {\n  model = 'clients';\n\n  constructor(private httpClient: HttpClient) { }\n\n  getUrl = () => {\n    return `${BASE_URL}${this.model}`;\n  }\n\n  getSuggestedClients = (clientSearched) => {\n    return this.httpClient.get<Client[]>(`${this.getUrl()}?name_like=${clientSearched}`);\n  }\n\n  getClients = (page: number, items: number, sortby: string, active: string) => {\n    sortby = convertToSortQueryString(sortby);\n    active = convertToActiveQueryString(active);\n    return this.httpClient.get<PaginatedResult>\n    (`${this.getUrl()}?page=${page}&limit=${items}&sortby=${sortby}&active=${active}`)\n      .pipe(catchError((error: HttpErrorResponse) => throwError(error)));\n  }\n  getClient = (id: number) => {\n    return this.httpClient.get<Client>(`${this.getUrl()}/${id}`);\n  }\n  deleteClient = (id: number) => {\n    return this.httpClient.put(`${this.getUrl()}/${id}`, {\n      isActive: false\n    });\n  }\n  editClient = (project: ClientRequest, id: number) => {\n    return this.httpClient.put<ClientResponse>(`${this.getUrl()}/${id}`, project);\n  }\n  addClient = (project: ClientRequest) => {\n    return this.httpClient.post<ClientResponse>(`${this.getUrl()}`, project);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Project } from './project';\nimport { PaginatedResult } from './paginatedResult';\nimport { convertToSortQueryString, convertToActiveQueryString } from '../../utils/queryUtils';\nimport { ProjectRequest } from './projectRequest';\nimport { ProjectResponse } from './projectResponse';\nimport { environment } from '../../../../environments/environment.prod';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\n\nconst BASE_URL = environment.SPRINGBOOT_API_ENDPOINT;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectsService {\n  // listmodel = 'projectslist';\n  model = 'projects';\n\n  constructor(private httpClient: HttpClient) { }\n\n  getSuggestedProjects = (projectSearched) => {\n    return this.httpClient.get<Project[]>(`${BASE_URL}${this.model}?name_like=${projectSearched}`);\n  }\n\n  getProjects = (page: number, items: number, sortby: string, active: string) => {\n    sortby = convertToSortQueryString(sortby);\n    active = convertToActiveQueryString(active);\n    return this.httpClient.get<PaginatedResult>(`${BASE_URL}${this.model}?page=${page}&limit=${items}&sortby=${sortby}&active=${active}`)\n      .pipe(catchError((error: HttpErrorResponse) => throwError(error)));\n  }\n\n  getProject = (id: number) => {\n    return this.httpClient.get<Project>(`${BASE_URL}${this.model}/${id}`);\n  }\n\n  deleteProject = (id: number) => {\n    return this.httpClient.put(`${BASE_URL}${this.model}/${id}`, {\n      isDeleted: true\n    });\n  }\n\n  editProject = (project: ProjectRequest, id: number) => {\n    return this.httpClient.put<ProjectResponse>(`${BASE_URL}${this.model}/update/${id}`, project);\n  }\n\n  addProject = (project: ProjectRequest) => {\n    return this.httpClient.post<ProjectResponse>(`${BASE_URL}${this.model}`, project);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Resource } from './resource';\nimport { ResourceData } from './resourcedata';\nimport { PaginatedResult } from './paginatedResult';\nimport { environment } from '../../../../environments/environment';\n\nconst BASE_URL = environment.SERVERLESS_API_ENDPOINT;\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ResourcesService {\n  model = 'resources';\n  constructor(private httpClient: HttpClient) { }\n\n  getResources = (page, items, unassigned) => {\n    if (unassigned === 'All') {\n      return this.httpClient.get<PaginatedResult>(`${BASE_URL}${this.model}?page=${page}&limit=${items}`);\n    } else {\n      return this.httpClient.get<PaginatedResult>(`${BASE_URL}${this.model}?page=${page}&limit=${items}&unassigned=true`);\n    }\n  }\n\n  getResource = (id) => {\n    return this.httpClient.get<ResourceData>(`${BASE_URL}${this.model}/${id}`);\n  }\n\n  getSuggestedResources = (searchedResource) => {\n    return this.httpClient.get<ResourceData[]>(`${BASE_URL}${this.model}?firstName_like=${searchedResource}`);\n  }\n\n  getMatchingResources = (skills) => {\n    // replace the actual implementation when connecting with API\n    return this.httpClient.get<ResourceData[]>(`${BASE_URL}${this.model}?_limit=10`);\n  }\n}\n","import { ClientRequest } from './../core-data/clients/clientRequest';\nimport { ProjectRequest } from '../core-data/projects/projectRequest';\n\nexport const ProjectValidation = (project: ProjectRequest) => {\n    let isValid = true;\n    const errors = {\n        isValid: false,\n        about: '',\n        projectName: '',\n        clientId: '',\n        duration: '',\n        requiredSkills: '',\n        resources: ''\n    };\n\n    if (project.about.trim().split(' ').length < 5) {\n        errors.about = 'Project description should have minimum 5 words';\n        isValid = false;\n    }\n    if (project.projectName.trim().length < 5) {\n        errors.projectName = 'Project Name should have minimum 5 characters';\n        isValid = false;\n    }\n    if (!project.clientID) {\n        errors.clientId = 'Client must be assigned';\n        isValid = false;\n    }\n    if (!(project.startDate || project.endDate)) {\n        errors.duration = 'Duration must be specified';\n        isValid = false;\n    }\n    if (!project.requiredSkills.length) {\n        errors.requiredSkills = 'Assign skills for the project';\n        isValid = false;\n    }\n    if (!project.resources.length) {\n        errors.resources = 'Assign resources for the project';\n        isValid = false;\n    }\n    errors.isValid = isValid;\n    return errors;\n};\n\nexport const ClientValidation = (client: ClientRequest) => {\n    let isValid = true;\n    const errors = {\n        isValid: false,\n        about: '',\n        clientName: '',\n        projects: '',\n    };\n\n    if (client.about.trim().split(' ').length < 5) {\n        errors.about = 'Client description should have minimum 5 words';\n        isValid = false;\n    }\n\n    if (!client.projects.length) {\n        errors.projects = 'Assign project for the client';\n        isValid = false;\n    }\n    errors.isValid = isValid;\n    return errors;\n};\n"],"sourceRoot":"webpack:///"}